[[parse.y (info)] Line 194: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  instruction_list
2: instruction_list ->  instruction
3: instruction_list ('\x0a') ->  instruction_list '\x0a' instruction
4: instruction (MNEMONIC) ->  optional_label MNEMONIC
5: instruction (MNEMONIC) ->  optional_label MNEMONIC opnd
6: instruction (MNEMONIC) ->  optional_label MNEMONIC opnd ',' opnd
7: optional_label ->  <empty>
8: optional_label (SYMBOL) ->  SYMBOL ':' '\x0a'
9: opnd ->  register_exp
10: opnd ->  exp
11: register_exp (REGISTER) ->  REGISTER
12: register_exp ('(') ->  '(' REGISTER ')'
13: register_exp (NUMBER) ->  NUMBER '(' REGISTER ')'
14: exp (SYMBOL) ->  SYMBOL
15: exp (IMMSYMBOL) ->  IMMSYMBOL
16: exp (NUMBER) ->  NUMBER
17: exp (IMMNUMBER) ->  IMMNUMBER
18: exp (SYMBOL) ->  SYMBOL '+' NUMBER
19: exp (IMMSYMBOL) ->  IMMSYMBOL '+' NUMBER
20: program_$ ->  program

[[parse.y (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: MNEMONIC
   258: SYMBOL
   259: IMMSYMBOL
   260: NUMBER
   261: IMMNUMBER
   262: REGISTER
    10: '\x0a'
    44: ','
    58: ':'
    40: '('
    41: ')'
    43: '+'

[[parse.y (info)] 
FIRST sets:
   program:  { MNEMONIC SYMBOL }
   instruction_list: { MNEMONIC SYMBOL }
   instruction: { MNEMONIC SYMBOL }
   optional_label: { SYMBOL <e> }
   opnd:     { SYMBOL IMMSYMBOL NUMBER IMMNUMBER REGISTER '(' }
   register_exp: { NUMBER REGISTER '(' }
   exp:      { SYMBOL IMMSYMBOL NUMBER IMMNUMBER }
   program_$: { MNEMONIC SYMBOL }

[[parse.y (info)] 
FOLLOW sets:
   program:  { <EOF> }
   instruction_list: { '\x0a' <EOF> }
   instruction: { '\x0a' <EOF> }
   optional_label: { MNEMONIC }
   opnd:     { '\x0a' ',' <EOF> }
   register_exp: { '\x0a' ',' <EOF> }
   exp:      { '\x0a' ',' <EOF> }
   program_$: { <EOF> }

[[parse.y (info)] 
Grammar States: 
[[parse.y (info)] 
For each state information like the following is shown for its items:
   0: [P1 1] S -> C  . C   { <EOF> }  0, (1 2 ) 0
which should be read as follows:
   0:          The item's index
   [P1 1]:     The rule (production) number and current dot-position
   S -> C . C: The item (lhs -> Recognized-symbols . symbols-to-recognize)
   { <EOF> }   The item's lookahead (LA) set
   0,          The next state's LA set is not enlarged (1: it is enlarged)
   (1 2)       Item indices of items whose LA sets depend on this item
   0           The next-element (shown below the items) describing the
               action associated with this item (-1 for reducible items)

The Next tables show entries like:
   0: On C to state 5 with (0 )
meaning:
   0:               The Next table's index
   On C to state 5: When C was recognized, continue at state 5
   with (0 )        The item(s) whose dot is shifted at the next state
Indices (like 0:) may be annotated as follows:
   0 (AUTO REMOVED by S/R resolution): On C ...
       in which case a reduction using a production with unspecified
       precedence took priority;
or:
   0 (removed by precedence): On C ...
       in which case a production rule's precedence took priority
Also, reduction item(s) may be listed


State 0:
0: [P20 0] program_$ ->  . program   { <EOF> }  0, (1 ) 0
1: [P1 0] program ->  . instruction_list   { <EOF> }  0, (2 3 ) 1
2: [P2 0] instruction_list ->  . instruction   { '\x0a' <EOF> }  0, (4 5 6 ) 2
3: [P3 0] instruction_list ->  . instruction_list '\x0a' instruction   { '\x0a' <EOF> }  0, (2 3 ) 1
4: [P4 0] instruction ->  . optional_label MNEMONIC   { '\x0a' <EOF> }  0, (7 8 ) 3
5: [P5 0] instruction ->  . optional_label MNEMONIC opnd   { '\x0a' <EOF> }  0, (7 8 ) 3
6: [P6 0] instruction ->  . optional_label MNEMONIC opnd ',' opnd   { '\x0a' <EOF> }  0, (7 8 ) 3
7: [P7 0] optional_label ->  .   { MNEMONIC }  1, () -1
8: [P8 0] optional_label ->  . SYMBOL ':' '\x0a'   { MNEMONIC }  0, () 4
  0:   On program to state 1 with (0 )
  1:   On instruction_list to state 2 with (1 3 )
  2:   On instruction to state 3 with (2 )
  3:   On optional_label to state 4 with (4 5 6 )
  4:   On SYMBOL to state 5 with (8 )
  Reduce item(s): 7 


State 1:
0: [P20 1] program_$ -> program  .   { <EOF> }  1, () -1


State 2:
0: [P1 1] program -> instruction_list  .   { <EOF> }  1, () -1
1: [P3 1] instruction_list -> instruction_list  . '\x0a' instruction   { '\x0a' <EOF> }  0, () 0
  0:   On '\x0a' to state 6 with (1 )
  Reduce item(s): 0 


State 3:
0: [P2 1] instruction_list -> instruction  .   { '\x0a' <EOF> }  1, () -1
  Reduce item(s): 0 


State 4:
0: [P4 1] instruction -> optional_label  . MNEMONIC   { '\x0a' <EOF> }  0, () 0
1: [P5 1] instruction -> optional_label  . MNEMONIC opnd   { '\x0a' <EOF> }  0, () 0
2: [P6 1] instruction -> optional_label  . MNEMONIC opnd ',' opnd   { '\x0a' <EOF> }  0, () 0
  0:   On MNEMONIC to state 7 with (0 1 2 )


State 5:
0: [P8 1] optional_label -> SYMBOL  . ':' '\x0a'   { MNEMONIC }  0, () 0
  0:   On ':' to state 8 with (0 )


State 6:
0: [P3 2] instruction_list -> instruction_list '\x0a'  . instruction   { '\x0a' <EOF> }  0, (1 2 3 ) 0
1: [P4 0] instruction ->  . optional_label MNEMONIC   { '\x0a' <EOF> }  0, (4 5 ) 1
2: [P5 0] instruction ->  . optional_label MNEMONIC opnd   { '\x0a' <EOF> }  0, (4 5 ) 1
3: [P6 0] instruction ->  . optional_label MNEMONIC opnd ',' opnd   { '\x0a' <EOF> }  0, (4 5 ) 1
4: [P7 0] optional_label ->  .   { MNEMONIC }  1, () -1
5: [P8 0] optional_label ->  . SYMBOL ':' '\x0a'   { MNEMONIC }  0, () 2
  0:   On instruction to state 9 with (0 )
  1:   On optional_label to state 4 with (1 2 3 )
  2:   On SYMBOL to state 5 with (5 )
  Reduce item(s): 4 


State 7:
0: [P4 2] instruction -> optional_label MNEMONIC  .   { '\x0a' <EOF> }  1, () -1
1: [P5 2] instruction -> optional_label MNEMONIC  . opnd   { '\x0a' <EOF> }  0, (3 4 ) 0
2: [P6 2] instruction -> optional_label MNEMONIC  . opnd ',' opnd   { '\x0a' <EOF> }  0, (3 4 ) 0
3: [P9 0] opnd ->  . register_exp   { '\x0a' ',' <EOF> }  0, (5 6 7 ) 1
4: [P10 0] opnd ->  . exp   { '\x0a' ',' <EOF> }  0, (8 9 10 11 12 13 ) 2
5: [P11 0] register_exp ->  . REGISTER   { '\x0a' ',' <EOF> }  0, () 3
6: [P12 0] register_exp ->  . '(' REGISTER ')'   { '\x0a' ',' <EOF> }  0, () 4
7: [P13 0] register_exp ->  . NUMBER '(' REGISTER ')'   { '\x0a' ',' <EOF> }  0, () 5
8: [P14 0] exp ->  . SYMBOL   { '\x0a' ',' <EOF> }  0, () 6
9: [P15 0] exp ->  . IMMSYMBOL   { '\x0a' ',' <EOF> }  0, () 7
10: [P16 0] exp ->  . NUMBER   { '\x0a' ',' <EOF> }  0, () 5
11: [P17 0] exp ->  . IMMNUMBER   { '\x0a' ',' <EOF> }  0, () 8
12: [P18 0] exp ->  . SYMBOL '+' NUMBER   { '\x0a' ',' <EOF> }  0, () 6
13: [P19 0] exp ->  . IMMSYMBOL '+' NUMBER   { '\x0a' ',' <EOF> }  0, () 7
  0:   On opnd to state 10 with (1 2 )
  1:   On register_exp to state 11 with (3 )
  2:   On exp to state 12 with (4 )
  3:   On REGISTER to state 13 with (5 )
  4:   On '(' to state 14 with (6 )
  5:   On NUMBER to state 15 with (7 10 )
  6:   On SYMBOL to state 16 with (8 12 )
  7:   On IMMSYMBOL to state 17 with (9 13 )
  8:   On IMMNUMBER to state 18 with (11 )
  Reduce item(s): 0 


State 8:
0: [P8 2] optional_label -> SYMBOL ':'  . '\x0a'   { MNEMONIC }  0, () 0
  0:   On '\x0a' to state 19 with (0 )


State 9:
0: [P3 3] instruction_list -> instruction_list '\x0a' instruction  .   { '\x0a' <EOF> }  1, () -1
  Reduce item(s): 0 


State 10:
0: [P5 3] instruction -> optional_label MNEMONIC opnd  .   { '\x0a' <EOF> }  1, () -1
1: [P6 3] instruction -> optional_label MNEMONIC opnd  . ',' opnd   { '\x0a' <EOF> }  0, () 0
  0:   On ',' to state 20 with (1 )
  Reduce item(s): 0 


State 11:
0: [P9 1] opnd -> register_exp  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 12:
0: [P10 1] opnd -> exp  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 13:
0: [P11 1] register_exp -> REGISTER  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 14:
0: [P12 1] register_exp -> '('  . REGISTER ')'   { '\x0a' ',' <EOF> }  0, () 0
  0:   On REGISTER to state 21 with (0 )


State 15:
0: [P13 1] register_exp -> NUMBER  . '(' REGISTER ')'   { '\x0a' ',' <EOF> }  0, () 0
1: [P16 1] exp -> NUMBER  .   { '\x0a' ',' <EOF> }  1, () -1
  0:   On '(' to state 22 with (0 )
  Reduce item(s): 1 


State 16:
0: [P14 1] exp -> SYMBOL  .   { '\x0a' ',' <EOF> }  1, () -1
1: [P18 1] exp -> SYMBOL  . '+' NUMBER   { '\x0a' ',' <EOF> }  0, () 0
  0:   On '+' to state 23 with (1 )
  Reduce item(s): 0 


State 17:
0: [P15 1] exp -> IMMSYMBOL  .   { '\x0a' ',' <EOF> }  1, () -1
1: [P19 1] exp -> IMMSYMBOL  . '+' NUMBER   { '\x0a' ',' <EOF> }  0, () 0
  0:   On '+' to state 24 with (1 )
  Reduce item(s): 0 


State 18:
0: [P17 1] exp -> IMMNUMBER  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 19:
0: [P8 3] optional_label -> SYMBOL ':' '\x0a'  .   { MNEMONIC }  1, () -1
  Reduce item(s): 0 


State 20:
0: [P6 4] instruction -> optional_label MNEMONIC opnd ','  . opnd   { '\x0a' <EOF> }  0, (1 2 ) 0
1: [P9 0] opnd ->  . register_exp   { '\x0a' <EOF> }  0, (3 4 5 ) 1
2: [P10 0] opnd ->  . exp   { '\x0a' <EOF> }  0, (6 7 8 9 10 11 ) 2
3: [P11 0] register_exp ->  . REGISTER   { '\x0a' <EOF> }  0, () 3
4: [P12 0] register_exp ->  . '(' REGISTER ')'   { '\x0a' <EOF> }  0, () 4
5: [P13 0] register_exp ->  . NUMBER '(' REGISTER ')'   { '\x0a' <EOF> }  0, () 5
6: [P14 0] exp ->  . SYMBOL   { '\x0a' <EOF> }  0, () 6
7: [P15 0] exp ->  . IMMSYMBOL   { '\x0a' <EOF> }  0, () 7
8: [P16 0] exp ->  . NUMBER   { '\x0a' <EOF> }  0, () 5
9: [P17 0] exp ->  . IMMNUMBER   { '\x0a' <EOF> }  0, () 8
10: [P18 0] exp ->  . SYMBOL '+' NUMBER   { '\x0a' <EOF> }  0, () 6
11: [P19 0] exp ->  . IMMSYMBOL '+' NUMBER   { '\x0a' <EOF> }  0, () 7
  0:   On opnd to state 25 with (0 )
  1:   On register_exp to state 11 with (1 )
  2:   On exp to state 12 with (2 )
  3:   On REGISTER to state 13 with (3 )
  4:   On '(' to state 14 with (4 )
  5:   On NUMBER to state 15 with (5 8 )
  6:   On SYMBOL to state 16 with (6 10 )
  7:   On IMMSYMBOL to state 17 with (7 11 )
  8:   On IMMNUMBER to state 18 with (9 )


State 21:
0: [P12 2] register_exp -> '(' REGISTER  . ')'   { '\x0a' ',' <EOF> }  0, () 0
  0:   On ')' to state 26 with (0 )


State 22:
0: [P13 2] register_exp -> NUMBER '('  . REGISTER ')'   { '\x0a' ',' <EOF> }  0, () 0
  0:   On REGISTER to state 27 with (0 )


State 23:
0: [P18 2] exp -> SYMBOL '+'  . NUMBER   { '\x0a' ',' <EOF> }  0, () 0
  0:   On NUMBER to state 28 with (0 )


State 24:
0: [P19 2] exp -> IMMSYMBOL '+'  . NUMBER   { '\x0a' ',' <EOF> }  0, () 0
  0:   On NUMBER to state 29 with (0 )


State 25:
0: [P6 5] instruction -> optional_label MNEMONIC opnd ',' opnd  .   { '\x0a' <EOF> }  1, () -1
  Reduce item(s): 0 


State 26:
0: [P12 3] register_exp -> '(' REGISTER ')'  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 27:
0: [P13 3] register_exp -> NUMBER '(' REGISTER  . ')'   { '\x0a' ',' <EOF> }  0, () 0
  0:   On ')' to state 30 with (0 )


State 28:
0: [P18 3] exp -> SYMBOL '+' NUMBER  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 29:
0: [P19 3] exp -> IMMSYMBOL '+' NUMBER  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 


State 30:
0: [P13 4] register_exp -> NUMBER '(' REGISTER ')'  .   { '\x0a' ',' <EOF> }  1, () -1
  Reduce item(s): 0 



