SYMBOL: main
colon: :
MNEMONIC: pushl
REGISTER: %ebp
MNEMONIC: movl
REGISTER: %esp
comma: ,
REGISTER: %ebp
MNEMONIC: andl
IMMNUMBER: $-16
comma: ,
REGISTER: %esp
MNEMONIC: subl
IMMNUMBER: $16
comma: ,
REGISTER: %esp
MNEMONIC: call
SYMBOL: swap
MNEMONIC: movl
SYMBOL: buf
plus: +
NUMBER: 4
comma: ,
REGISTER: %edx
MNEMONIC: movl
SYMBOL: buf
comma: ,
REGISTER: %eax
MNEMONIC: movl
REGISTER: %edx
comma: ,
NUMBER: 8
lparen: (
REGISTER: %esp
rparen: )
MNEMONIC: movl
REGISTER: %eax
comma: ,
NUMBER: 4
lparen: (
REGISTER: %esp
rparen: )
MNEMONIC: movl
IMMSYMBOL: $.LCO
comma: ,
lparen: (
REGISTER: %esp
rparen: )
MNEMONIC: call
SYMBOL: printf
MNEMONIC: movl
IMMNUMBER: $0
comma: ,
REGISTER: %eax
MNEMONIC: leave
MNEMONIC: ret
SYMBOL: swap
colon: :
MNEMONIC: pushl
REGISTER: %ebp
MNEMONIC: movl
REGISTER: %esp
comma: ,
REGISTER: %ebp
MNEMONIC: subl
IMMNUMBER: $16
comma: ,
REGISTER: %esp
MNEMONIC: movl
IMMSYMBOL: $buf
plus: +
NUMBER: 4
comma: ,
SYMBOL: bufp1
MNEMONIC: movl
SYMBOL: bufp0
comma: ,
REGISTER: %eax
MNEMONIC: movl
lparen: (
REGISTER: %eax
rparen: )
comma: ,
REGISTER: %eax
MNEMONIC: movl
REGISTER: %eax
comma: ,
NUMBER: -4
lparen: (
REGISTER: %ebp
rparen: )
MNEMONIC: movl
SYMBOL: bufp0
comma: ,
REGISTER: %eax
MNEMONIC: movl
SYMBOL: bufp1
comma: ,
REGISTER: %edx
MNEMONIC: movl
lparen: (
REGISTER: %edx
rparen: )
comma: ,
REGISTER: %edx
MNEMONIC: movl
REGISTER: %edx
comma: ,
lparen: (
REGISTER: %eax
rparen: )
MNEMONIC: movl
SYMBOL: bufp1
comma: ,
REGISTER: %eax
MNEMONIC: movl
NUMBER: -4
lparen: (
REGISTER: %ebp
rparen: )
comma: ,
REGISTER: %edx
MNEMONIC: movl
REGISTER: %edx
comma: ,
lparen: (
REGISTER: %eax
rparen: )
MNEMONIC: leave
MNEMONIC: ret
