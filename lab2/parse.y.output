[parse.y (info)] Line 364: 
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: translation_unit ->  struct_specifier
2: translation_unit ->  function_definition
3: translation_unit ->  translation_unit function_definition
4: translation_unit ->  translation_unit struct_specifier
5: struct_specifier (STRUCT) ->  STRUCT IDENTIFIER '{' declaration_list '}' ';'
6: function_definition ->  type_specifier fun_declarator compound_statement
7: type_specifier ->  base_type
8: type_specifier ('*') ->  type_specifier '*'
9: base_type (VOID) ->  VOID
10: base_type (INT) ->  INT
11: base_type (FLOAT) ->  FLOAT
12: base_type (STRUCT) ->  STRUCT IDENTIFIER
13: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' parameter_list ')'
14: fun_declarator (IDENTIFIER) ->  IDENTIFIER '(' ')'
15: parameter_list ->  parameter_declaration
16: parameter_list (',') ->  parameter_list ',' parameter_declaration
17: parameter_declaration ->  type_specifier declarator
18: declarator (IDENTIFIER) ->  IDENTIFIER
19: declarator ('[') ->  declarator '[' constant_expression ']'
20: constant_expression (INT_CONSTANT) ->  INT_CONSTANT
21: constant_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
22: constant_expression (STRING_LITERAL) ->  STRING_LITERAL
23: compound_statement ('{') ->  '{' '}'
24: compound_statement ('{') ->  '{' statement_list '}'
25: compound_statement ('{') ->  '{' declaration_list statement_list '}'
26: statement_list ->  statement
27: statement_list ->  statement_list statement
28: statement ('{') ->  '{' statement_list '}'
29: statement ->  selection_statement
30: statement ->  iteration_statement
31: statement ->  assignment_statement
32: statement (RETURN) ->  RETURN expression ';'
33: assignment_statement (';') ->  ';'
34: assignment_statement ('=') ->  l_expression '=' expression ';'
35: expression ->  logical_and_expression
36: expression (OR_OP) ->  expression OR_OP logical_and_expression
37: logical_and_expression ->  equality_expression
38: logical_and_expression (AND_OP) ->  logical_and_expression AND_OP equality_expression
39: equality_expression ->  relational_expression
40: equality_expression (EQ_OP) ->  equality_expression EQ_OP relational_expression
41: equality_expression (NE_OP) ->  equality_expression NE_OP relational_expression
42: relational_expression ->  additive_expression
43: relational_expression ('<') ->  relational_expression '<' additive_expression
44: relational_expression ('>') ->  relational_expression '>' additive_expression
45: relational_expression (LE_OP) ->  relational_expression LE_OP additive_expression
46: relational_expression (GE_OP) ->  relational_expression GE_OP additive_expression
47: additive_expression ->  multiplicative_expression
48: additive_expression ('+') ->  additive_expression '+' multiplicative_expression
49: additive_expression ('-') ->  additive_expression '-' multiplicative_expression
50: multiplicative_expression ->  unary_expression
51: multiplicative_expression ('*') ->  multiplicative_expression '*' unary_expression
52: multiplicative_expression ('/') ->  multiplicative_expression '/' unary_expression
53: unary_expression ->  postfix_expression
54: unary_expression ->  unary_operator postfix_expression
55: postfix_expression ->  primary_expression
56: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' ')'
57: postfix_expression (IDENTIFIER) ->  IDENTIFIER '(' expression_list ')'
58: postfix_expression (INC_OP) ->  l_expression INC_OP
59: primary_expression ->  l_expression
60: primary_expression ('&') ->  '&' l_expression
61: primary_expression ('=') ->  l_expression '=' expression
62: primary_expression (INT_CONSTANT) ->  INT_CONSTANT
63: primary_expression (FLOAT_CONSTANT) ->  FLOAT_CONSTANT
64: primary_expression (STRING_LITERAL) ->  STRING_LITERAL
65: primary_expression ('(') ->  '(' expression ')'
66: l_expression (IDENTIFIER) ->  IDENTIFIER
67: l_expression ('[') ->  l_expression '[' expression ']'
68: l_expression ('*') ->  '*' l_expression
69: l_expression ('.') ->  l_expression '.' IDENTIFIER
70: l_expression (PTR_OP) ->  l_expression PTR_OP IDENTIFIER
71: expression_list ->  expression
72: expression_list (',') ->  expression_list ',' expression
73: unary_operator ('-') ->  '-'
74: unary_operator ('!') ->  '!'
75: selection_statement (IF) ->  IF '(' expression ')' statement ELSE statement
76: iteration_statement (WHILE) ->  WHILE '(' expression ')' statement
77: iteration_statement (FOR) ->  FOR '(' expression ';' expression ';' expression ')' statement
78: declaration_list ->  declaration
79: declaration_list ->  declaration_list declaration
80: declaration (';') ->  type_specifier declarator_list ';'
81: declarator_list ->  declarator
82: declarator_list (',') ->  declarator_list ',' declarator
83: translation_unit_$ ->  translation_unit

[parse.y (info)] 
Symbolic Terminal tokens:
       error
       EOF
   257: VOID
   258: INT
   259: FLOAT
   260: INT_CONSTANT
   261: FLOAT_CONSTANT
   262: RETURN
   263: IF
   264: ELSE
   265: WHILE
   266: FOR
   267: IDENTIFIER
   268: STRING_LITERAL
   269: GE_OP
   270: LE_OP
   271: EQ_OP
   272: NE_OP
   273: OR_OP
   274: AND_OP
   275: INC_OP
   276: STRUCT
   277: PTR_OP
   123: '{'
   125: '}'
    59: ';'
    42: '*'
    40: '('
    41: ')'
    44: ','
    91: '['
    93: ']'
    61: '='
    60: '<'
    62: '>'
    43: '+'
    45: '-'
    47: '/'
    38: '&'
    46: '.'
    33: '!'

[parse.y (info)] 
FIRST sets:
   translation_unit: { VOID INT FLOAT STRUCT }
   struct_specifier: { STRUCT }
   function_definition: { VOID INT FLOAT STRUCT }
   type_specifier: { VOID INT FLOAT STRUCT }
   fun_declarator: { IDENTIFIER }
   base_type: { VOID INT FLOAT STRUCT }
   parameter_list: { VOID INT FLOAT STRUCT }
   parameter_declaration: { VOID INT FLOAT STRUCT }
   declarator: { IDENTIFIER }
   constant_expression: { INT_CONSTANT FLOAT_CONSTANT STRING_LITERAL }
   compound_statement: { '{' }
   statement_list: { RETURN IF WHILE FOR IDENTIFIER '{' ';' '*' }
   statement: { RETURN IF WHILE FOR IDENTIFIER '{' ';' '*' }
   assignment_statement: { IDENTIFIER ';' '*' }
   expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   logical_and_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   equality_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   relational_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   additive_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   multiplicative_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   unary_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   postfix_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }
   primary_expression: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }
   l_expression: { IDENTIFIER '*' }
   expression_list: { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '-' '&' '!' }
   unary_operator: { '-' '!' }
   selection_statement: { IF }
   iteration_statement: { WHILE FOR }
   declaration_list: { VOID INT FLOAT STRUCT }
   declaration: { VOID INT FLOAT STRUCT }
   declarator_list: { IDENTIFIER }
   translation_unit_$: { VOID INT FLOAT STRUCT }

[parse.y (info)] 
Grammar States: 
[parse.y (info)] 
For each state information like the following is shown for its items:
   0: [P1 1] S -> C  . C   { <EOF> }  0
which should be read as follows:
   0:          The item's index
   [P1 1]:     The rule (production) number and current dot-position
   S -> C . C: The item (lhs -> Recognized-symbols . symbols-to-recognize)
   { <EOF> }   The item's lookahead (LA) set
   0           The next-element (shown below the items) describing the
               action associated with this item (-1 for reducible items)

The Next tables show entries like:
   0: On C to state 5 with (0 )
meaning:
   0:               The Next table's index
   On C to state 5: When C was recognized, continue at state 5
   with (0 )        The item(s) whose dot is shifted at the next state
Indices (like 0:) may be annotated as follows:
   0 (AUTO REMOVED by S/R resolution): On C ...
       in which case a reduction using a production with unspecified
       precedence took priority;
or:
   0 (removed by precedence): On C ...
       in which case a production rule's precedence took priority
Also, reduction item(s) may be listed


State 0:
0: [P83 0] translation_unit_$ ->  . translation_unit   { <EOF> }  0
1: [P1 0] translation_unit ->  . struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  1
2: [P2 0] translation_unit ->  . function_definition   { VOID INT FLOAT STRUCT <EOF> }  2
3: [P3 0] translation_unit ->  . translation_unit function_definition   { VOID INT FLOAT STRUCT <EOF> }  0
4: [P4 0] translation_unit ->  . translation_unit struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  0
5: [P5 0] struct_specifier ->  . STRUCT IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  3
6: [P6 0] function_definition ->  . type_specifier fun_declarator compound_statement   { VOID INT FLOAT STRUCT <EOF> }  4
7: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  5
8: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  4
9: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  6
10: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  7
11: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  8
12: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  3
  0:   On translation_unit to state 1 with (0 3 4 )
  1:   On struct_specifier to state 2 with (1 )
  2:   On function_definition to state 3 with (2 )
  3:   On STRUCT to state 4 with (5 12 )
  4:   On type_specifier to state 5 with (6 8 )
  5:   On base_type to state 6 with (7 )
  6:   On VOID to state 7 with (9 )
  7:   On INT to state 8 with (10 )
  8:   On FLOAT to state 9 with (11 )


State 1:
0: [P83 1] translation_unit_$ -> translation_unit  .   { <EOF> }  -1
1: [P3 1] translation_unit -> translation_unit  . function_definition   { VOID INT FLOAT STRUCT <EOF> }  0
2: [P4 1] translation_unit -> translation_unit  . struct_specifier   { VOID INT FLOAT STRUCT <EOF> }  1
3: [P6 0] function_definition ->  . type_specifier fun_declarator compound_statement   { VOID INT FLOAT STRUCT <EOF> }  2
4: [P5 0] struct_specifier ->  . STRUCT IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  3
5: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  4
6: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  2
7: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  5
8: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  6
9: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  7
10: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  3
  0:   On function_definition to state 10 with (1 )
  1:   On struct_specifier to state 11 with (2 )
  2:   On type_specifier to state 5 with (3 6 )
  3:   On STRUCT to state 4 with (4 10 )
  4:   On base_type to state 6 with (5 )
  5:   On VOID to state 7 with (7 )
  6:   On INT to state 8 with (8 )
  7:   On FLOAT to state 9 with (9 )


State 2:
0: [P1 1] translation_unit -> struct_specifier  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 3:
0: [P2 1] translation_unit -> function_definition  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 4:
0: [P5 1] struct_specifier -> STRUCT  . IDENTIFIER '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P12 1] base_type -> STRUCT  . IDENTIFIER   { IDENTIFIER '*' }  0
  0:   On IDENTIFIER to state 12 with (0 1 )


State 5:
0: [P6 1] function_definition -> type_specifier  . fun_declarator compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P8 1] type_specifier -> type_specifier  . '*'   { IDENTIFIER '*' }  1
2: [P13 0] fun_declarator ->  . IDENTIFIER '(' parameter_list ')'   { '{' }  2
3: [P14 0] fun_declarator ->  . IDENTIFIER '(' ')'   { '{' }  2
  0:   On fun_declarator to state 13 with (0 )
  1:   On '*' to state 14 with (1 )
  2:   On IDENTIFIER to state 15 with (2 3 )


State 6:
0: [P7 1] type_specifier -> base_type  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 7:
0: [P9 1] base_type -> VOID  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 8:
0: [P10 1] base_type -> INT  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 9:
0: [P11 1] base_type -> FLOAT  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 10:
0: [P3 2] translation_unit -> translation_unit function_definition  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 11:
0: [P4 2] translation_unit -> translation_unit struct_specifier  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 12:
0: [P5 2] struct_specifier -> STRUCT IDENTIFIER  . '{' declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P12 2] base_type -> STRUCT IDENTIFIER  .   { IDENTIFIER '*' }  -1
  0:   On '{' to state 16 with (0 )
  Reduce item(s): 1 


State 13:
0: [P6 2] function_definition -> type_specifier fun_declarator  . compound_statement   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P23 0] compound_statement ->  . '{' '}'   { VOID INT FLOAT STRUCT <EOF> }  1
2: [P24 0] compound_statement ->  . '{' statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  1
3: [P25 0] compound_statement ->  . '{' declaration_list statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  1
  0:   On compound_statement to state 17 with (0 )
  1:   On '{' to state 18 with (1 2 3 )


State 14:
0: [P8 2] type_specifier -> type_specifier '*'  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 15:
0: [P13 1] fun_declarator -> IDENTIFIER  . '(' parameter_list ')'   { '{' }  0
1: [P14 1] fun_declarator -> IDENTIFIER  . '(' ')'   { '{' }  0
  0:   On '(' to state 19 with (0 1 )


State 16:
0: [P5 3] struct_specifier -> STRUCT IDENTIFIER '{'  . declaration_list '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P78 0] declaration_list ->  . declaration   { VOID INT FLOAT STRUCT '}' }  1
2: [P79 0] declaration_list ->  . declaration_list declaration   { VOID INT FLOAT STRUCT '}' }  0
3: [P80 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT STRUCT '}' }  2
4: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  3
5: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  2
6: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  4
7: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  5
8: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  6
9: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  7
  0:   On declaration_list to state 20 with (0 2 )
  1:   On declaration to state 21 with (1 )
  2:   On type_specifier to state 22 with (3 5 )
  3:   On base_type to state 6 with (4 )
  4:   On VOID to state 7 with (6 )
  5:   On INT to state 8 with (7 )
  6:   On FLOAT to state 9 with (8 )
  7:   On STRUCT to state 23 with (9 )


State 17:
0: [P6 3] function_definition -> type_specifier fun_declarator compound_statement  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 18:
0: [P23 1] compound_statement -> '{'  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P24 1] compound_statement -> '{'  . statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  1
2: [P25 1] compound_statement -> '{'  . declaration_list statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  2
3: [P26 0] statement_list ->  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P27 0] statement_list ->  . statement_list statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
5: [P78 0] declaration_list ->  . declaration   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' ';' '*' }  4
6: [P79 0] declaration_list ->  . declaration_list declaration   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' ';' '*' }  2
7: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
8: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
9: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
10: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
11: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
12: [P80 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' ';' '*' }  10
13: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
14: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  12
15: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  13
16: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  14
17: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  15
18: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  16
19: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  10
20: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  17
21: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  15
22: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  18
23: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  15
24: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  15
25: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  19
26: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  20
27: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  21
28: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  22
  0:   On '}' to state 24 with (0 )
  1:   On statement_list to state 25 with (1 4 )
  2:   On declaration_list to state 26 with (2 6 )
  3:   On statement to state 27 with (3 )
  4:   On declaration to state 21 with (5 )
  5:   On '{' to state 28 with (7 )
  6:   On selection_statement to state 29 with (8 )
  7:   On iteration_statement to state 30 with (9 )
  8:   On assignment_statement to state 31 with (10 )
  9:   On RETURN to state 32 with (11 )
  10:   On type_specifier to state 22 with (12 19 )
  11:   On IF to state 33 with (13 )
  12:   On WHILE to state 34 with (14 )
  13:   On FOR to state 35 with (15 )
  14:   On ';' to state 36 with (16 )
  15:   On l_expression to state 37 with (17 21 23 24 )
  16:   On base_type to state 6 with (18 )
  17:   On IDENTIFIER to state 38 with (20 )
  18:   On '*' to state 39 with (22 )
  19:   On VOID to state 7 with (25 )
  20:   On INT to state 8 with (26 )
  21:   On FLOAT to state 9 with (27 )
  22:   On STRUCT to state 23 with (28 )


State 19:
0: [P13 2] fun_declarator -> IDENTIFIER '('  . parameter_list ')'   { '{' }  0
1: [P14 2] fun_declarator -> IDENTIFIER '('  . ')'   { '{' }  1
2: [P15 0] parameter_list ->  . parameter_declaration   { ')' ',' }  2
3: [P16 0] parameter_list ->  . parameter_list ',' parameter_declaration   { ')' ',' }  0
4: [P17 0] parameter_declaration ->  . type_specifier declarator   { ')' ',' }  3
5: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  4
6: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  3
7: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  5
8: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  6
9: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  7
10: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  8
  0:   On parameter_list to state 40 with (0 3 )
  1:   On ')' to state 41 with (1 )
  2:   On parameter_declaration to state 42 with (2 )
  3:   On type_specifier to state 43 with (4 6 )
  4:   On base_type to state 6 with (5 )
  5:   On VOID to state 7 with (7 )
  6:   On INT to state 8 with (8 )
  7:   On FLOAT to state 9 with (9 )
  8:   On STRUCT to state 23 with (10 )


State 20:
0: [P5 4] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list  . '}' ';'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P79 1] declaration_list -> declaration_list  . declaration   { VOID INT FLOAT STRUCT '}' }  1
2: [P80 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT STRUCT '}' }  2
3: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  3
4: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  2
5: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  4
6: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  5
7: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  6
8: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  7
  0:   On '}' to state 44 with (0 )
  1:   On declaration to state 45 with (1 )
  2:   On type_specifier to state 22 with (2 4 )
  3:   On base_type to state 6 with (3 )
  4:   On VOID to state 7 with (5 )
  5:   On INT to state 8 with (6 )
  6:   On FLOAT to state 9 with (7 )
  7:   On STRUCT to state 23 with (8 )


State 21:
0: [P78 1] declaration_list -> declaration  .   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 22:
0: [P80 1] declaration -> type_specifier  . declarator_list ';'   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' '}' ';' '*' }  0
1: [P8 1] type_specifier -> type_specifier  . '*'   { IDENTIFIER '*' }  1
2: [P81 0] declarator_list ->  . declarator   { ';' ',' }  2
3: [P82 0] declarator_list ->  . declarator_list ',' declarator   { ';' ',' }  0
4: [P18 0] declarator ->  . IDENTIFIER   { ';' ',' '[' }  3
5: [P19 0] declarator ->  . declarator '[' constant_expression ']'   { ';' ',' '[' }  2
  0:   On declarator_list to state 46 with (0 3 )
  1:   On '*' to state 14 with (1 )
  2:   On declarator to state 47 with (2 5 )
  3:   On IDENTIFIER to state 48 with (4 )


State 23:
0: [P12 1] base_type -> STRUCT  . IDENTIFIER   { IDENTIFIER '*' }  0
  0:   On IDENTIFIER to state 49 with (0 )


State 24:
0: [P23 2] compound_statement -> '{' '}'  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 25:
0: [P24 2] compound_statement -> '{' statement_list  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P27 1] statement_list -> statement_list  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
12: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  12
13: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  11
14: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  13
15: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  11
16: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  11
  0:   On '}' to state 50 with (0 )
  1:   On statement to state 51 with (1 )
  2:   On '{' to state 28 with (2 )
  3:   On selection_statement to state 29 with (3 )
  4:   On iteration_statement to state 30 with (4 )
  5:   On assignment_statement to state 31 with (5 )
  6:   On RETURN to state 32 with (6 )
  7:   On IF to state 33 with (7 )
  8:   On WHILE to state 34 with (8 )
  9:   On FOR to state 35 with (9 )
  10:   On ';' to state 36 with (10 )
  11:   On l_expression to state 37 with (11 13 15 16 )
  12:   On IDENTIFIER to state 38 with (12 )
  13:   On '*' to state 39 with (14 )


State 26:
0: [P25 2] compound_statement -> '{' declaration_list  . statement_list '}'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P79 1] declaration_list -> declaration_list  . declaration   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' ';' '*' }  1
2: [P26 0] statement_list ->  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P27 0] statement_list ->  . statement_list statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
4: [P80 0] declaration ->  . type_specifier declarator_list ';'   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' ';' '*' }  3
5: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
6: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
7: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
8: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
9: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
10: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  9
11: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  3
12: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
13: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
14: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  12
15: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  13
16: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  14
17: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  15
18: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  16
19: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  17
20: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  18
21: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  19
22: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  14
23: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  20
24: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  14
25: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  14
  0:   On statement_list to state 52 with (0 3 )
  1:   On declaration to state 45 with (1 )
  2:   On statement to state 27 with (2 )
  3:   On type_specifier to state 22 with (4 11 )
  4:   On '{' to state 28 with (5 )
  5:   On selection_statement to state 29 with (6 )
  6:   On iteration_statement to state 30 with (7 )
  7:   On assignment_statement to state 31 with (8 )
  8:   On RETURN to state 32 with (9 )
  9:   On base_type to state 6 with (10 )
  10:   On IF to state 33 with (12 )
  11:   On WHILE to state 34 with (13 )
  12:   On FOR to state 35 with (14 )
  13:   On ';' to state 36 with (15 )
  14:   On l_expression to state 37 with (16 22 24 25 )
  15:   On VOID to state 7 with (17 )
  16:   On INT to state 8 with (18 )
  17:   On FLOAT to state 9 with (19 )
  18:   On STRUCT to state 23 with (20 )
  19:   On IDENTIFIER to state 38 with (21 )
  20:   On '*' to state 39 with (23 )


State 27:
0: [P26 1] statement_list -> statement  .   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 28:
0: [P28 1] statement -> '{'  . statement_list '}'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P26 0] statement_list ->  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P27 0] statement_list ->  . statement_list statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
3: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
4: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
5: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
6: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
7: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
8: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
9: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
10: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
11: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
12: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
13: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  12
14: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  11
15: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  13
16: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  11
17: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  11
  0:   On statement_list to state 53 with (0 2 )
  1:   On statement to state 27 with (1 )
  2:   On '{' to state 28 with (3 )
  3:   On selection_statement to state 29 with (4 )
  4:   On iteration_statement to state 30 with (5 )
  5:   On assignment_statement to state 31 with (6 )
  6:   On RETURN to state 32 with (7 )
  7:   On IF to state 33 with (8 )
  8:   On WHILE to state 34 with (9 )
  9:   On FOR to state 35 with (10 )
  10:   On ';' to state 36 with (11 )
  11:   On l_expression to state 37 with (12 14 16 17 )
  12:   On IDENTIFIER to state 38 with (13 )
  13:   On '*' to state 39 with (15 )


State 29:
0: [P29 1] statement -> selection_statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 30:
0: [P30 1] statement -> iteration_statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 31:
0: [P31 1] statement -> assignment_statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 32:
0: [P32 1] statement -> RETURN  . expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ';' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 54 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 33:
0: [P75 1] selection_statement -> IF  . '(' expression ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
  0:   On '(' to state 73 with (0 )


State 34:
0: [P76 1] iteration_statement -> WHILE  . '(' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
  0:   On '(' to state 74 with (0 )


State 35:
0: [P77 1] iteration_statement -> FOR  . '(' expression ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
  0:   On '(' to state 75 with (0 )


State 36:
0: [P33 1] assignment_statement -> ';'  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 37:
0: [P34 1] assignment_statement -> l_expression  . '=' expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P67 1] l_expression -> l_expression  . '[' expression ']'   { PTR_OP '[' '=' '.' }  1
2: [P69 1] l_expression -> l_expression  . '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  2
3: [P70 1] l_expression -> l_expression  . PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  3
  0:   On '=' to state 76 with (0 )
  1:   On '[' to state 77 with (1 )
  2:   On '.' to state 78 with (2 )
  3:   On PTR_OP to state 79 with (3 )


State 38:
0: [P66 1] l_expression -> IDENTIFIER  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  -1
  Reduce item(s): 0 


State 39:
0: [P68 1] l_expression -> '*'  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
1: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  1
2: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
3: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  2
4: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
5: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
  0:   On l_expression to state 80 with (0 2 4 5 )
  1:   On IDENTIFIER to state 38 with (1 )
  2:   On '*' to state 39 with (3 )


State 40:
0: [P13 3] fun_declarator -> IDENTIFIER '(' parameter_list  . ')'   { '{' }  0
1: [P16 1] parameter_list -> parameter_list  . ',' parameter_declaration   { ')' ',' }  1
  0:   On ')' to state 81 with (0 )
  1:   On ',' to state 82 with (1 )


State 41:
0: [P14 3] fun_declarator -> IDENTIFIER '(' ')'  .   { '{' }  -1
  Reduce item(s): 0 


State 42:
0: [P15 1] parameter_list -> parameter_declaration  .   { ')' ',' }  -1
  Reduce item(s): 0 


State 43:
0: [P17 1] parameter_declaration -> type_specifier  . declarator   { ')' ',' }  0
1: [P8 1] type_specifier -> type_specifier  . '*'   { IDENTIFIER '*' }  1
2: [P18 0] declarator ->  . IDENTIFIER   { ')' ',' '[' }  2
3: [P19 0] declarator ->  . declarator '[' constant_expression ']'   { ')' ',' '[' }  0
  0:   On declarator to state 83 with (0 3 )
  1:   On '*' to state 14 with (1 )
  2:   On IDENTIFIER to state 48 with (2 )


State 44:
0: [P5 5] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list '}'  . ';'   { VOID INT FLOAT STRUCT <EOF> }  0
  0:   On ';' to state 84 with (0 )


State 45:
0: [P79 2] declaration_list -> declaration_list declaration  .   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 46:
0: [P80 2] declaration -> type_specifier declarator_list  . ';'   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' '}' ';' '*' }  0
1: [P82 1] declarator_list -> declarator_list  . ',' declarator   { ';' ',' }  1
  0:   On ';' to state 85 with (0 )
  1:   On ',' to state 86 with (1 )


State 47:
0: [P81 1] declarator_list -> declarator  .   { ';' ',' }  -1
1: [P19 1] declarator -> declarator  . '[' constant_expression ']'   { ';' ',' '[' }  0
  0:   On '[' to state 87 with (1 )
  Reduce item(s): 0 


State 48:
0: [P18 1] declarator -> IDENTIFIER  .   { ';' ')' ',' '[' }  -1
  Reduce item(s): 0 


State 49:
0: [P12 2] base_type -> STRUCT IDENTIFIER  .   { IDENTIFIER '*' }  -1
  Reduce item(s): 0 


State 50:
0: [P24 3] compound_statement -> '{' statement_list '}'  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 51:
0: [P27 2] statement_list -> statement_list statement  .   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 52:
0: [P25 3] compound_statement -> '{' declaration_list statement_list  . '}'   { VOID INT FLOAT STRUCT <EOF> }  0
1: [P27 1] statement_list -> statement_list  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
12: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  12
13: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  11
14: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  13
15: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  11
16: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  11
  0:   On '}' to state 88 with (0 )
  1:   On statement to state 51 with (1 )
  2:   On '{' to state 28 with (2 )
  3:   On selection_statement to state 29 with (3 )
  4:   On iteration_statement to state 30 with (4 )
  5:   On assignment_statement to state 31 with (5 )
  6:   On RETURN to state 32 with (6 )
  7:   On IF to state 33 with (7 )
  8:   On WHILE to state 34 with (8 )
  9:   On FOR to state 35 with (9 )
  10:   On ';' to state 36 with (10 )
  11:   On l_expression to state 37 with (11 13 15 16 )
  12:   On IDENTIFIER to state 38 with (12 )
  13:   On '*' to state 39 with (14 )


State 53:
0: [P28 2] statement -> '{' statement_list  . '}'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P27 1] statement_list -> statement_list  . statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P29 0] statement ->  . selection_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P30 0] statement ->  . iteration_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P31 0] statement ->  . assignment_statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P33 0] assignment_statement ->  . ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF WHILE FOR IDENTIFIER '{' '}' ';' '*' }  11
12: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  12
13: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  11
14: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  13
15: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  11
16: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  11
  0:   On '}' to state 89 with (0 )
  1:   On statement to state 51 with (1 )
  2:   On '{' to state 28 with (2 )
  3:   On selection_statement to state 29 with (3 )
  4:   On iteration_statement to state 30 with (4 )
  5:   On assignment_statement to state 31 with (5 )
  6:   On RETURN to state 32 with (6 )
  7:   On IF to state 33 with (7 )
  8:   On WHILE to state 34 with (8 )
  9:   On FOR to state 35 with (9 )
  10:   On ';' to state 36 with (10 )
  11:   On l_expression to state 37 with (11 13 15 16 )
  12:   On IDENTIFIER to state 38 with (12 )
  13:   On '*' to state 39 with (14 )


State 54:
0: [P32 2] statement -> RETURN expression  . ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  1
  0:   On ';' to state 90 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 55:
0: [P35 1] expression -> logical_and_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P38 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
  0:   On AND_OP to state 92 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on AND_OP:
	shift to state 92, removed AND_OP from LA-set of rule 35)


State 56:
0: [P37 1] logical_and_expression -> equality_expression  .   { GE_OP LE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P40 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P41 1] equality_expression -> equality_expression  . NE_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On EQ_OP to state 93 with (1 )
  1:   On NE_OP to state 94 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on EQ_OP:
	shift to state 93, removed EQ_OP from LA-set of rule 37)
Solved SR CONFLICT on NE_OP:
	shift to state 94, removed NE_OP from LA-set of rule 37)


State 57:
0: [P39 1] equality_expression -> relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '+' '-' '/' }  -1
1: [P43 1] relational_expression -> relational_expression  . '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P44 1] relational_expression -> relational_expression  . '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
3: [P45 1] relational_expression -> relational_expression  . LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P46 1] relational_expression -> relational_expression  . GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 95, removed '<' from LA-set of rule 39)
Solved SR CONFLICT on '>':
	shift to state 96, removed '>' from LA-set of rule 39)
Solved SR CONFLICT on LE_OP:
	shift to state 97, removed LE_OP from LA-set of rule 39)
Solved SR CONFLICT on GE_OP:
	shift to state 98, removed GE_OP from LA-set of rule 39)


State 58:
0: [P42 1] relational_expression -> additive_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '/' }  -1
1: [P48 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P49 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '+' to state 99 with (1 )
  1:   On '-' to state 100 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 99, removed '+' from LA-set of rule 42)
Solved SR CONFLICT on '-':
	shift to state 100, removed '-' from LA-set of rule 42)


State 59:
0: [P47 1] additive_expression -> multiplicative_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' ')' ',' ']' '<' '>' '+' '-' }  -1
1: [P51 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P52 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '*' to state 101 with (1 )
  1:   On '/' to state 102 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 101, removed '*' from LA-set of rule 47)
Solved SR CONFLICT on '/':
	shift to state 102, removed '/' from LA-set of rule 47)


State 60:
0: [P50 1] multiplicative_expression -> unary_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 61:
0: [P53 1] unary_expression -> postfix_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 62:
0: [P54 1] unary_expression -> unary_operator  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
3: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
5: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
6: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
7: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
8: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
9: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
10: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
11: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
12: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  2
13: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  3
14: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  9
15: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  3
16: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  3
  0:   On postfix_expression to state 103 with (0 )
  1:   On primary_expression to state 63 with (1 )
  2:   On IDENTIFIER to state 64 with (2 3 12 )
  3:   On l_expression to state 65 with (4 5 7 13 15 16 )
  4:   On '&' to state 68 with (6 )
  5:   On INT_CONSTANT to state 69 with (8 )
  6:   On FLOAT_CONSTANT to state 70 with (9 )
  7:   On STRING_LITERAL to state 71 with (10 )
  8:   On '(' to state 72 with (11 )
  9:   On '*' to state 39 with (14 )


State 63:
0: [P55 1] postfix_expression -> primary_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 64:
0: [P56 1] postfix_expression -> IDENTIFIER  . '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P57 1] postfix_expression -> IDENTIFIER  . '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P66 1] l_expression -> IDENTIFIER  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  -1
  0:   On '(' to state 104 with (0 1 )
  Reduce item(s): 2 


State 65:
0: [P58 1] postfix_expression -> l_expression  . INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P59 1] primary_expression -> l_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
2: [P61 1] primary_expression -> l_expression  . '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
3: [P67 1] l_expression -> l_expression  . '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  2
4: [P69 1] l_expression -> l_expression  . '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  3
5: [P70 1] l_expression -> l_expression  . PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  4
  0:   On INC_OP to state 105 with (0 )
  1:   On '=' to state 106 with (2 )
  2:   On '[' to state 77 with (3 )
  3:   On '.' to state 78 with (4 )
  4:   On PTR_OP to state 79 with (5 )
  Reduce item(s): 1 


State 66:
0: [P73 1] unary_operator -> '-'  .   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  -1
  Reduce item(s): 0 


State 67:
0: [P74 1] unary_operator -> '!'  .   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  -1
  Reduce item(s): 0 


State 68:
0: [P60 1] primary_expression -> '&'  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  1
2: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  0
3: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  2
4: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  0
5: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  0
  0:   On l_expression to state 107 with (0 2 4 5 )
  1:   On IDENTIFIER to state 38 with (1 )
  2:   On '*' to state 39 with (3 )


State 69:
0: [P62 1] primary_expression -> INT_CONSTANT  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 70:
0: [P63 1] primary_expression -> FLOAT_CONSTANT  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 71:
0: [P64 1] primary_expression -> STRING_LITERAL  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 72:
0: [P65 1] primary_expression -> '('  . expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 108 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 73:
0: [P75 2] selection_statement -> IF '('  . expression ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 109 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 74:
0: [P76 2] iteration_statement -> WHILE '('  . expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 110 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 75:
0: [P77 2] iteration_statement -> FOR '('  . expression ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ';' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 111 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 76:
0: [P34 2] assignment_statement -> l_expression '='  . expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ';' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 112 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 77:
0: [P67 2] l_expression -> l_expression '['  . expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ']' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ']' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ']' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ']' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ']' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ']' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ']' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 113 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 78:
0: [P69 2] l_expression -> l_expression '.'  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
  0:   On IDENTIFIER to state 114 with (0 )


State 79:
0: [P70 2] l_expression -> l_expression PTR_OP  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
  0:   On IDENTIFIER to state 115 with (0 )


State 80:
0: [P68 2] l_expression -> '*' l_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP ';' '*' ')' ',' ']' '=' '<' '>' '+' '-' '/' }  -1
1: [P67 1] l_expression -> l_expression  . '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
2: [P69 1] l_expression -> l_expression  . '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  1
3: [P70 1] l_expression -> l_expression  . PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  2
  0:   On '[' to state 77 with (1 )
  1:   On '.' to state 78 with (2 )
  2:   On PTR_OP to state 79 with (3 )
  Reduce item(s): 0 
Solved SR CONFLICT on '[':
	shift to state 77, removed '[' from LA-set of rule 68)
Solved SR CONFLICT on '.':
	shift to state 78, removed '.' from LA-set of rule 68)
Solved SR CONFLICT on PTR_OP:
	shift to state 79, removed PTR_OP from LA-set of rule 68)


State 81:
0: [P13 4] fun_declarator -> IDENTIFIER '(' parameter_list ')'  .   { '{' }  -1
  Reduce item(s): 0 


State 82:
0: [P16 2] parameter_list -> parameter_list ','  . parameter_declaration   { ')' ',' }  0
1: [P17 0] parameter_declaration ->  . type_specifier declarator   { ')' ',' }  1
2: [P7 0] type_specifier ->  . base_type   { IDENTIFIER '*' }  2
3: [P8 0] type_specifier ->  . type_specifier '*'   { IDENTIFIER '*' }  1
4: [P9 0] base_type ->  . VOID   { IDENTIFIER '*' }  3
5: [P10 0] base_type ->  . INT   { IDENTIFIER '*' }  4
6: [P11 0] base_type ->  . FLOAT   { IDENTIFIER '*' }  5
7: [P12 0] base_type ->  . STRUCT IDENTIFIER   { IDENTIFIER '*' }  6
  0:   On parameter_declaration to state 116 with (0 )
  1:   On type_specifier to state 43 with (1 3 )
  2:   On base_type to state 6 with (2 )
  3:   On VOID to state 7 with (4 )
  4:   On INT to state 8 with (5 )
  5:   On FLOAT to state 9 with (6 )
  6:   On STRUCT to state 23 with (7 )


State 83:
0: [P17 2] parameter_declaration -> type_specifier declarator  .   { ')' ',' }  -1
1: [P19 1] declarator -> declarator  . '[' constant_expression ']'   { ')' ',' '[' }  0
  0:   On '[' to state 87 with (1 )
  Reduce item(s): 0 


State 84:
0: [P5 6] struct_specifier -> STRUCT IDENTIFIER '{' declaration_list '}' ';'  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 85:
0: [P80 3] declaration -> type_specifier declarator_list ';'  .   { VOID INT FLOAT RETURN IF WHILE FOR IDENTIFIER STRUCT '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 86:
0: [P82 2] declarator_list -> declarator_list ','  . declarator   { ';' ',' }  0
1: [P18 0] declarator ->  . IDENTIFIER   { ';' ',' '[' }  1
2: [P19 0] declarator ->  . declarator '[' constant_expression ']'   { ';' ',' '[' }  0
  0:   On declarator to state 117 with (0 2 )
  1:   On IDENTIFIER to state 48 with (1 )


State 87:
0: [P19 2] declarator -> declarator '['  . constant_expression ']'   { ';' ')' ',' '[' }  0
1: [P20 0] constant_expression ->  . INT_CONSTANT   { ']' }  1
2: [P21 0] constant_expression ->  . FLOAT_CONSTANT   { ']' }  2
3: [P22 0] constant_expression ->  . STRING_LITERAL   { ']' }  3
  0:   On constant_expression to state 118 with (0 )
  1:   On INT_CONSTANT to state 119 with (1 )
  2:   On FLOAT_CONSTANT to state 120 with (2 )
  3:   On STRING_LITERAL to state 121 with (3 )


State 88:
0: [P25 4] compound_statement -> '{' declaration_list statement_list '}'  .   { VOID INT FLOAT STRUCT <EOF> }  -1
  Reduce item(s): 0 


State 89:
0: [P28 3] statement -> '{' statement_list '}'  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 90:
0: [P32 3] statement -> RETURN expression ';'  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 91:
0: [P36 2] expression -> expression OR_OP  . logical_and_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P37 0] logical_and_expression ->  . equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P39 0] equality_expression ->  . relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
5: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
7: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
8: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
9: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
10: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
11: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
12: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
13: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
14: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
15: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
16: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
17: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
18: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
19: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
20: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
21: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
22: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
23: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  11
24: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
25: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
26: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
27: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
28: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
29: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  15
30: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  16
31: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  17
32: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  9
33: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  10
34: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  18
35: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  10
36: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  10
  0:   On logical_and_expression to state 122 with (0 2 )
  1:   On equality_expression to state 56 with (1 4 5 )
  2:   On relational_expression to state 57 with (3 7 8 9 10 )
  3:   On additive_expression to state 58 with (6 12 13 )
  4:   On multiplicative_expression to state 59 with (11 15 16 )
  5:   On unary_expression to state 60 with (14 )
  6:   On postfix_expression to state 61 with (17 )
  7:   On unary_operator to state 62 with (18 )
  8:   On primary_expression to state 63 with (19 )
  9:   On IDENTIFIER to state 64 with (20 21 32 )
  10:   On l_expression to state 65 with (22 25 27 33 35 36 )
  11:   On '-' to state 66 with (23 )
  12:   On '!' to state 67 with (24 )
  13:   On '&' to state 68 with (26 )
  14:   On INT_CONSTANT to state 69 with (28 )
  15:   On FLOAT_CONSTANT to state 70 with (29 )
  16:   On STRING_LITERAL to state 71 with (30 )
  17:   On '(' to state 72 with (31 )
  18:   On '*' to state 39 with (34 )


State 92:
0: [P38 2] logical_and_expression -> logical_and_expression AND_OP  . equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P39 0] equality_expression ->  . relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
7: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
8: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
9: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
10: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
11: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
12: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
13: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
14: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
15: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
16: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
17: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
18: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
19: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
20: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
21: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  10
22: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  11
23: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
24: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
25: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
26: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
27: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
28: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  15
29: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  16
30: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
31: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  9
32: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  17
33: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  9
34: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  9
  0:   On equality_expression to state 123 with (0 2 3 )
  1:   On relational_expression to state 57 with (1 5 6 7 8 )
  2:   On additive_expression to state 58 with (4 10 11 )
  3:   On multiplicative_expression to state 59 with (9 13 14 )
  4:   On unary_expression to state 60 with (12 )
  5:   On postfix_expression to state 61 with (15 )
  6:   On unary_operator to state 62 with (16 )
  7:   On primary_expression to state 63 with (17 )
  8:   On IDENTIFIER to state 64 with (18 19 30 )
  9:   On l_expression to state 65 with (20 23 25 31 33 34 )
  10:   On '-' to state 66 with (21 )
  11:   On '!' to state 67 with (22 )
  12:   On '&' to state 68 with (24 )
  13:   On INT_CONSTANT to state 69 with (26 )
  14:   On FLOAT_CONSTANT to state 70 with (27 )
  15:   On STRING_LITERAL to state 71 with (28 )
  16:   On '(' to state 72 with (29 )
  17:   On '*' to state 39 with (32 )


State 93:
0: [P40 2] equality_expression -> equality_expression EQ_OP  . relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
5: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
6: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
7: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
8: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
9: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
10: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
11: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
12: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
13: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
14: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
15: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
17: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
18: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
19: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  10
20: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
21: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
22: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
23: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
24: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
25: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
26: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  15
27: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
28: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
29: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  16
30: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
31: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
  0:   On relational_expression to state 124 with (0 2 3 4 5 )
  1:   On additive_expression to state 58 with (1 7 8 )
  2:   On multiplicative_expression to state 59 with (6 10 11 )
  3:   On unary_expression to state 60 with (9 )
  4:   On postfix_expression to state 61 with (12 )
  5:   On unary_operator to state 62 with (13 )
  6:   On primary_expression to state 63 with (14 )
  7:   On IDENTIFIER to state 64 with (15 16 27 )
  8:   On l_expression to state 65 with (17 20 22 28 30 31 )
  9:   On '-' to state 66 with (18 )
  10:   On '!' to state 67 with (19 )
  11:   On '&' to state 68 with (21 )
  12:   On INT_CONSTANT to state 69 with (23 )
  13:   On FLOAT_CONSTANT to state 70 with (24 )
  14:   On STRING_LITERAL to state 71 with (25 )
  15:   On '(' to state 72 with (26 )
  16:   On '*' to state 39 with (29 )


State 94:
0: [P41 2] equality_expression -> equality_expression NE_OP  . relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
5: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
6: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
7: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
8: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
9: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
10: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
11: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
12: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
13: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
14: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
15: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
17: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
18: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
19: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  10
20: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
21: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
22: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
23: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
24: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
25: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
26: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  15
27: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
28: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
29: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  16
30: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
31: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  8
  0:   On relational_expression to state 125 with (0 2 3 4 5 )
  1:   On additive_expression to state 58 with (1 7 8 )
  2:   On multiplicative_expression to state 59 with (6 10 11 )
  3:   On unary_expression to state 60 with (9 )
  4:   On postfix_expression to state 61 with (12 )
  5:   On unary_operator to state 62 with (13 )
  6:   On primary_expression to state 63 with (14 )
  7:   On IDENTIFIER to state 64 with (15 16 27 )
  8:   On l_expression to state 65 with (17 20 22 28 30 31 )
  9:   On '-' to state 66 with (18 )
  10:   On '!' to state 67 with (19 )
  11:   On '&' to state 68 with (21 )
  12:   On INT_CONSTANT to state 69 with (23 )
  13:   On FLOAT_CONSTANT to state 70 with (24 )
  14:   On STRING_LITERAL to state 71 with (25 )
  15:   On '(' to state 72 with (26 )
  16:   On '*' to state 39 with (29 )


State 95:
0: [P43 2] relational_expression -> relational_expression '<'  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
7: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
8: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
9: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
11: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
12: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
13: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
14: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
15: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
17: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
18: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
19: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
20: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
21: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
22: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
24: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  15
25: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
26: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
  0:   On additive_expression to state 126 with (0 2 3 )
  1:   On multiplicative_expression to state 59 with (1 5 6 )
  2:   On unary_expression to state 60 with (4 )
  3:   On postfix_expression to state 61 with (7 )
  4:   On unary_operator to state 62 with (8 )
  5:   On primary_expression to state 63 with (9 )
  6:   On IDENTIFIER to state 64 with (10 11 22 )
  7:   On l_expression to state 65 with (12 15 17 23 25 26 )
  8:   On '-' to state 66 with (13 )
  9:   On '!' to state 67 with (14 )
  10:   On '&' to state 68 with (16 )
  11:   On INT_CONSTANT to state 69 with (18 )
  12:   On FLOAT_CONSTANT to state 70 with (19 )
  13:   On STRING_LITERAL to state 71 with (20 )
  14:   On '(' to state 72 with (21 )
  15:   On '*' to state 39 with (24 )


State 96:
0: [P44 2] relational_expression -> relational_expression '>'  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
7: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
8: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
9: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
11: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
12: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
13: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
14: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
15: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
17: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
18: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
19: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
20: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
21: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
22: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
24: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  15
25: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
26: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
  0:   On additive_expression to state 127 with (0 2 3 )
  1:   On multiplicative_expression to state 59 with (1 5 6 )
  2:   On unary_expression to state 60 with (4 )
  3:   On postfix_expression to state 61 with (7 )
  4:   On unary_operator to state 62 with (8 )
  5:   On primary_expression to state 63 with (9 )
  6:   On IDENTIFIER to state 64 with (10 11 22 )
  7:   On l_expression to state 65 with (12 15 17 23 25 26 )
  8:   On '-' to state 66 with (13 )
  9:   On '!' to state 67 with (14 )
  10:   On '&' to state 68 with (16 )
  11:   On INT_CONSTANT to state 69 with (18 )
  12:   On FLOAT_CONSTANT to state 70 with (19 )
  13:   On STRING_LITERAL to state 71 with (20 )
  14:   On '(' to state 72 with (21 )
  15:   On '*' to state 39 with (24 )


State 97:
0: [P45 2] relational_expression -> relational_expression LE_OP  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
7: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
8: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
9: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
11: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
12: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
13: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
14: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
15: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
17: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
18: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
19: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
20: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
21: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
22: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
24: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  15
25: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
26: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
  0:   On additive_expression to state 128 with (0 2 3 )
  1:   On multiplicative_expression to state 59 with (1 5 6 )
  2:   On unary_expression to state 60 with (4 )
  3:   On postfix_expression to state 61 with (7 )
  4:   On unary_operator to state 62 with (8 )
  5:   On primary_expression to state 63 with (9 )
  6:   On IDENTIFIER to state 64 with (10 11 22 )
  7:   On l_expression to state 65 with (12 15 17 23 25 26 )
  8:   On '-' to state 66 with (13 )
  9:   On '!' to state 67 with (14 )
  10:   On '&' to state 68 with (16 )
  11:   On INT_CONSTANT to state 69 with (18 )
  12:   On FLOAT_CONSTANT to state 70 with (19 )
  13:   On STRING_LITERAL to state 71 with (20 )
  14:   On '(' to state 72 with (21 )
  15:   On '*' to state 39 with (24 )


State 98:
0: [P46 2] relational_expression -> relational_expression GE_OP  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
6: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
7: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
8: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
9: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
11: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
12: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
13: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
14: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  9
15: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
16: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
17: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
18: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
19: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
20: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
21: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
22: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
24: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  15
25: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
26: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  7
  0:   On additive_expression to state 129 with (0 2 3 )
  1:   On multiplicative_expression to state 59 with (1 5 6 )
  2:   On unary_expression to state 60 with (4 )
  3:   On postfix_expression to state 61 with (7 )
  4:   On unary_operator to state 62 with (8 )
  5:   On primary_expression to state 63 with (9 )
  6:   On IDENTIFIER to state 64 with (10 11 22 )
  7:   On l_expression to state 65 with (12 15 17 23 25 26 )
  8:   On '-' to state 66 with (13 )
  9:   On '!' to state 67 with (14 )
  10:   On '&' to state 68 with (16 )
  11:   On INT_CONSTANT to state 69 with (18 )
  12:   On FLOAT_CONSTANT to state 70 with (19 )
  13:   On STRING_LITERAL to state 71 with (20 )
  14:   On '(' to state 72 with (21 )
  15:   On '*' to state 39 with (24 )


State 99:
0: [P48 2] additive_expression -> additive_expression '+'  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
6: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
7: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
8: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
9: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
10: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  7
11: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
12: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
13: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
14: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
15: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
16: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
17: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
18: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
19: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
20: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
21: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  14
22: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
  0:   On multiplicative_expression to state 130 with (0 2 3 )
  1:   On unary_expression to state 60 with (1 )
  2:   On postfix_expression to state 61 with (4 )
  3:   On unary_operator to state 62 with (5 )
  4:   On primary_expression to state 63 with (6 )
  5:   On IDENTIFIER to state 64 with (7 8 19 )
  6:   On l_expression to state 65 with (9 12 14 20 22 23 )
  7:   On '-' to state 66 with (10 )
  8:   On '!' to state 67 with (11 )
  9:   On '&' to state 68 with (13 )
  10:   On INT_CONSTANT to state 69 with (15 )
  11:   On FLOAT_CONSTANT to state 70 with (16 )
  12:   On STRING_LITERAL to state 71 with (17 )
  13:   On '(' to state 72 with (18 )
  14:   On '*' to state 39 with (21 )


State 100:
0: [P49 2] additive_expression -> additive_expression '-'  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
4: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
5: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
6: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
7: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
8: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
9: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
10: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  7
11: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  8
12: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
13: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
14: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
15: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
16: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
17: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
18: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  13
19: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
20: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
21: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  14
22: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
23: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  6
  0:   On multiplicative_expression to state 131 with (0 2 3 )
  1:   On unary_expression to state 60 with (1 )
  2:   On postfix_expression to state 61 with (4 )
  3:   On unary_operator to state 62 with (5 )
  4:   On primary_expression to state 63 with (6 )
  5:   On IDENTIFIER to state 64 with (7 8 19 )
  6:   On l_expression to state 65 with (9 12 14 20 22 23 )
  7:   On '-' to state 66 with (10 )
  8:   On '!' to state 67 with (11 )
  9:   On '&' to state 68 with (13 )
  10:   On INT_CONSTANT to state 69 with (15 )
  11:   On FLOAT_CONSTANT to state 70 with (16 )
  12:   On STRING_LITERAL to state 71 with (17 )
  13:   On '(' to state 72 with (18 )
  14:   On '*' to state 39 with (21 )


State 101:
0: [P51 2] multiplicative_expression -> multiplicative_expression '*'  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
3: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
4: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
5: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
6: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
7: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  6
8: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  7
9: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
11: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
12: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
13: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
14: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
15: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
16: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  4
17: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
18: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  13
19: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
20: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
  0:   On unary_expression to state 132 with (0 )
  1:   On postfix_expression to state 61 with (1 )
  2:   On unary_operator to state 62 with (2 )
  3:   On primary_expression to state 63 with (3 )
  4:   On IDENTIFIER to state 64 with (4 5 16 )
  5:   On l_expression to state 65 with (6 9 11 17 19 20 )
  6:   On '-' to state 66 with (7 )
  7:   On '!' to state 67 with (8 )
  8:   On '&' to state 68 with (10 )
  9:   On INT_CONSTANT to state 69 with (12 )
  10:   On FLOAT_CONSTANT to state 70 with (13 )
  11:   On STRING_LITERAL to state 71 with (14 )
  12:   On '(' to state 72 with (15 )
  13:   On '*' to state 39 with (18 )


State 102:
0: [P52 2] multiplicative_expression -> multiplicative_expression '/'  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
3: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
4: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
5: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
6: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
7: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  6
8: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  7
9: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
10: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
11: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
12: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
13: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
14: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
15: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  12
16: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  4
17: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
18: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  13
19: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
20: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  5
  0:   On unary_expression to state 133 with (0 )
  1:   On postfix_expression to state 61 with (1 )
  2:   On unary_operator to state 62 with (2 )
  3:   On primary_expression to state 63 with (3 )
  4:   On IDENTIFIER to state 64 with (4 5 16 )
  5:   On l_expression to state 65 with (6 9 11 17 19 20 )
  6:   On '-' to state 66 with (7 )
  7:   On '!' to state 67 with (8 )
  8:   On '&' to state 68 with (10 )
  9:   On INT_CONSTANT to state 69 with (12 )
  10:   On FLOAT_CONSTANT to state 70 with (13 )
  11:   On STRING_LITERAL to state 71 with (14 )
  12:   On '(' to state 72 with (15 )
  13:   On '*' to state 39 with (18 )


State 103:
0: [P54 2] unary_expression -> unary_operator postfix_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 104:
0: [P56 2] postfix_expression -> IDENTIFIER '('  . ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P57 2] postfix_expression -> IDENTIFIER '('  . expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P71 0] expression_list ->  . expression   { ')' ',' }  2
3: [P72 0] expression_list ->  . expression_list ',' expression   { ')' ',' }  1
4: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' ',' }  3
5: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' ',' }  2
6: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' ',' }  4
7: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' ',' }  3
8: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  5
9: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  4
10: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  4
11: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  6
12: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  5
13: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  5
14: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  5
15: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  5
16: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  7
17: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  6
18: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  6
19: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  8
20: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  7
21: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  7
22: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  9
23: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  10
24: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  11
25: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  12
26: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  12
27: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  13
28: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  14
29: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  15
30: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  13
31: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  16
32: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  13
33: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  17
34: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  18
35: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  19
36: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  20
37: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  12
38: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  13
39: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  21
40: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  13
41: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  13
  0:   On ')' to state 134 with (0 )
  1:   On expression_list to state 135 with (1 3 )
  2:   On expression to state 136 with (2 5 )
  3:   On logical_and_expression to state 55 with (4 7 )
  4:   On equality_expression to state 56 with (6 9 10 )
  5:   On relational_expression to state 57 with (8 12 13 14 15 )
  6:   On additive_expression to state 58 with (11 17 18 )
  7:   On multiplicative_expression to state 59 with (16 20 21 )
  8:   On unary_expression to state 60 with (19 )
  9:   On postfix_expression to state 61 with (22 )
  10:   On unary_operator to state 62 with (23 )
  11:   On primary_expression to state 63 with (24 )
  12:   On IDENTIFIER to state 64 with (25 26 37 )
  13:   On l_expression to state 65 with (27 30 32 38 40 41 )
  14:   On '-' to state 66 with (28 )
  15:   On '!' to state 67 with (29 )
  16:   On '&' to state 68 with (31 )
  17:   On INT_CONSTANT to state 69 with (33 )
  18:   On FLOAT_CONSTANT to state 70 with (34 )
  19:   On STRING_LITERAL to state 71 with (35 )
  20:   On '(' to state 72 with (36 )
  21:   On '*' to state 39 with (39 )


State 105:
0: [P58 2] postfix_expression -> l_expression INC_OP  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 106:
0: [P61 2] primary_expression -> l_expression '='  . expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P35 0] expression ->  . logical_and_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
5: [P39 0] equality_expression ->  . relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 137 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 107:
0: [P60 2] primary_expression -> '&' l_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P67 1] l_expression -> l_expression  . '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  0
2: [P69 1] l_expression -> l_expression  . '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  1
3: [P70 1] l_expression -> l_expression  . PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP PTR_OP ';' '*' ')' ',' '[' ']' '<' '>' '+' '-' '/' '.' }  2
  0:   On '[' to state 77 with (1 )
  1:   On '.' to state 78 with (2 )
  2:   On PTR_OP to state 79 with (3 )
  Reduce item(s): 0 


State 108:
0: [P65 2] primary_expression -> '(' expression  . ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  1
  0:   On ')' to state 138 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 109:
0: [P75 3] selection_statement -> IF '(' expression  . ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  1
  0:   On ')' to state 139 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 110:
0: [P76 3] iteration_statement -> WHILE '(' expression  . ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  1
  0:   On ')' to state 140 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 111:
0: [P77 3] iteration_statement -> FOR '(' expression  . ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  1
  0:   On ';' to state 141 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 112:
0: [P34 3] assignment_statement -> l_expression '=' expression  . ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  1
  0:   On ';' to state 142 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 113:
0: [P67 3] l_expression -> l_expression '[' expression  . ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ']' }  1
  0:   On ']' to state 143 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 114:
0: [P69 3] l_expression -> l_expression '.' IDENTIFIER  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  -1
  Reduce item(s): 0 


State 115:
0: [P70 3] l_expression -> l_expression PTR_OP IDENTIFIER  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  -1
  Reduce item(s): 0 


State 116:
0: [P16 3] parameter_list -> parameter_list ',' parameter_declaration  .   { ')' ',' }  -1
  Reduce item(s): 0 


State 117:
0: [P82 3] declarator_list -> declarator_list ',' declarator  .   { ';' ',' }  -1
1: [P19 1] declarator -> declarator  . '[' constant_expression ']'   { ';' ',' '[' }  0
  0:   On '[' to state 87 with (1 )
  Reduce item(s): 0 


State 118:
0: [P19 3] declarator -> declarator '[' constant_expression  . ']'   { ';' ')' ',' '[' }  0
  0:   On ']' to state 144 with (0 )


State 119:
0: [P20 1] constant_expression -> INT_CONSTANT  .   { ']' }  -1
  Reduce item(s): 0 


State 120:
0: [P21 1] constant_expression -> FLOAT_CONSTANT  .   { ']' }  -1
  Reduce item(s): 0 


State 121:
0: [P22 1] constant_expression -> STRING_LITERAL  .   { ']' }  -1
  Reduce item(s): 0 


State 122:
0: [P36 3] expression -> expression OR_OP logical_and_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P38 1] logical_and_expression -> logical_and_expression  . AND_OP equality_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
  0:   On AND_OP to state 92 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on AND_OP:
	shift to state 92, removed AND_OP from LA-set of rule 36)


State 123:
0: [P38 3] logical_and_expression -> logical_and_expression AND_OP equality_expression  .   { GE_OP LE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P40 1] equality_expression -> equality_expression  . EQ_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P41 1] equality_expression -> equality_expression  . NE_OP relational_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On EQ_OP to state 93 with (1 )
  1:   On NE_OP to state 94 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on EQ_OP:
	shift to state 93, removed EQ_OP from LA-set of rule 38)
Solved SR CONFLICT on NE_OP:
	shift to state 94, removed NE_OP from LA-set of rule 38)


State 124:
0: [P40 3] equality_expression -> equality_expression EQ_OP relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '+' '-' '/' }  -1
1: [P43 1] relational_expression -> relational_expression  . '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P44 1] relational_expression -> relational_expression  . '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
3: [P45 1] relational_expression -> relational_expression  . LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P46 1] relational_expression -> relational_expression  . GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 95, removed '<' from LA-set of rule 40)
Solved SR CONFLICT on '>':
	shift to state 96, removed '>' from LA-set of rule 40)
Solved SR CONFLICT on LE_OP:
	shift to state 97, removed LE_OP from LA-set of rule 40)
Solved SR CONFLICT on GE_OP:
	shift to state 98, removed GE_OP from LA-set of rule 40)


State 125:
0: [P41 3] equality_expression -> equality_expression NE_OP relational_expression  .   { EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '+' '-' '/' }  -1
1: [P43 1] relational_expression -> relational_expression  . '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P44 1] relational_expression -> relational_expression  . '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
3: [P45 1] relational_expression -> relational_expression  . LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  2
4: [P46 1] relational_expression -> relational_expression  . GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  3
  0:   On '<' to state 95 with (1 )
  1:   On '>' to state 96 with (2 )
  2:   On LE_OP to state 97 with (3 )
  3:   On GE_OP to state 98 with (4 )
  Reduce item(s): 0 
Solved SR CONFLICT on '<':
	shift to state 95, removed '<' from LA-set of rule 41)
Solved SR CONFLICT on '>':
	shift to state 96, removed '>' from LA-set of rule 41)
Solved SR CONFLICT on LE_OP:
	shift to state 97, removed LE_OP from LA-set of rule 41)
Solved SR CONFLICT on GE_OP:
	shift to state 98, removed GE_OP from LA-set of rule 41)


State 126:
0: [P43 3] relational_expression -> relational_expression '<' additive_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '/' }  -1
1: [P48 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P49 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '+' to state 99 with (1 )
  1:   On '-' to state 100 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 99, removed '+' from LA-set of rule 43)
Solved SR CONFLICT on '-':
	shift to state 100, removed '-' from LA-set of rule 43)


State 127:
0: [P44 3] relational_expression -> relational_expression '>' additive_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '/' }  -1
1: [P48 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P49 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '+' to state 99 with (1 )
  1:   On '-' to state 100 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 99, removed '+' from LA-set of rule 44)
Solved SR CONFLICT on '-':
	shift to state 100, removed '-' from LA-set of rule 44)


State 128:
0: [P45 3] relational_expression -> relational_expression LE_OP additive_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '/' }  -1
1: [P48 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P49 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '+' to state 99 with (1 )
  1:   On '-' to state 100 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 99, removed '+' from LA-set of rule 45)
Solved SR CONFLICT on '-':
	shift to state 100, removed '-' from LA-set of rule 45)


State 129:
0: [P46 3] relational_expression -> relational_expression GE_OP additive_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '/' }  -1
1: [P48 1] additive_expression -> additive_expression  . '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P49 1] additive_expression -> additive_expression  . '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '+' to state 99 with (1 )
  1:   On '-' to state 100 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '+':
	shift to state 99, removed '+' from LA-set of rule 46)
Solved SR CONFLICT on '-':
	shift to state 100, removed '-' from LA-set of rule 46)


State 130:
0: [P48 3] additive_expression -> additive_expression '+' multiplicative_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' ')' ',' ']' '<' '>' '+' '-' }  -1
1: [P51 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P52 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '*' to state 101 with (1 )
  1:   On '/' to state 102 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 101, removed '*' from LA-set of rule 48)
Solved SR CONFLICT on '/':
	shift to state 102, removed '/' from LA-set of rule 48)


State 131:
0: [P49 3] additive_expression -> additive_expression '-' multiplicative_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' ')' ',' ']' '<' '>' '+' '-' }  -1
1: [P51 1] multiplicative_expression -> multiplicative_expression  . '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
2: [P52 1] multiplicative_expression -> multiplicative_expression  . '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  1
  0:   On '*' to state 101 with (1 )
  1:   On '/' to state 102 with (2 )
  Reduce item(s): 0 
Solved SR CONFLICT on '*':
	shift to state 101, removed '*' from LA-set of rule 49)
Solved SR CONFLICT on '/':
	shift to state 102, removed '/' from LA-set of rule 49)


State 132:
0: [P51 3] multiplicative_expression -> multiplicative_expression '*' unary_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 133:
0: [P52 3] multiplicative_expression -> multiplicative_expression '/' unary_expression  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 134:
0: [P56 3] postfix_expression -> IDENTIFIER '(' ')'  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 135:
0: [P57 3] postfix_expression -> IDENTIFIER '(' expression_list  . ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
1: [P72 1] expression_list -> expression_list  . ',' expression   { ')' ',' }  1
  0:   On ')' to state 145 with (0 )
  1:   On ',' to state 146 with (1 )


State 136:
0: [P71 1] expression_list -> expression  .   { ')' ',' }  -1
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' ',' }  0
  0:   On OR_OP to state 91 with (1 )
  Reduce item(s): 0 


State 137:
0: [P61 3] primary_expression -> l_expression '=' expression  .   { GE_OP LE_OP EQ_OP NE_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  0
  0:   On OR_OP to state 91 with (1 )
  Reduce item(s): 0 
Solved SR CONFLICT on OR_OP:
	shift to state 91, removed OR_OP from LA-set of rule 61)


State 138:
0: [P65 3] primary_expression -> '(' expression ')'  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 139:
0: [P75 4] selection_statement -> IF '(' expression ')'  . statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P28 0] statement ->  . '{' statement_list '}'   { ELSE }  1
2: [P29 0] statement ->  . selection_statement   { ELSE }  2
3: [P30 0] statement ->  . iteration_statement   { ELSE }  3
4: [P31 0] statement ->  . assignment_statement   { ELSE }  4
5: [P32 0] statement ->  . RETURN expression ';'   { ELSE }  5
6: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { ELSE }  6
7: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { ELSE }  7
8: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { ELSE }  8
9: [P33 0] assignment_statement ->  . ';'   { ELSE }  9
10: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { ELSE }  10
11: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  11
12: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  10
13: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  12
14: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  10
15: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  10
  0:   On statement to state 147 with (0 )
  1:   On '{' to state 28 with (1 )
  2:   On selection_statement to state 29 with (2 )
  3:   On iteration_statement to state 30 with (3 )
  4:   On assignment_statement to state 31 with (4 )
  5:   On RETURN to state 32 with (5 )
  6:   On IF to state 33 with (6 )
  7:   On WHILE to state 34 with (7 )
  8:   On FOR to state 35 with (8 )
  9:   On ';' to state 36 with (9 )
  10:   On l_expression to state 37 with (10 12 14 15 )
  11:   On IDENTIFIER to state 38 with (11 )
  12:   On '*' to state 39 with (13 )


State 140:
0: [P76 4] iteration_statement -> WHILE '(' expression ')'  . statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P29 0] statement ->  . selection_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P30 0] statement ->  . iteration_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P31 0] statement ->  . assignment_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P33 0] assignment_statement ->  . ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  11
12: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  10
13: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  12
14: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  10
15: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  10
  0:   On statement to state 148 with (0 )
  1:   On '{' to state 28 with (1 )
  2:   On selection_statement to state 29 with (2 )
  3:   On iteration_statement to state 30 with (3 )
  4:   On assignment_statement to state 31 with (4 )
  5:   On RETURN to state 32 with (5 )
  6:   On IF to state 33 with (6 )
  7:   On WHILE to state 34 with (7 )
  8:   On FOR to state 35 with (8 )
  9:   On ';' to state 36 with (9 )
  10:   On l_expression to state 37 with (10 12 14 15 )
  11:   On IDENTIFIER to state 38 with (11 )
  12:   On '*' to state 39 with (13 )


State 141:
0: [P77 4] iteration_statement -> FOR '(' expression ';'  . expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ';' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ';' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ';' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ';' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ';' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 149 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 142:
0: [P34 4] assignment_statement -> l_expression '=' expression ';'  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 143:
0: [P67 4] l_expression -> l_expression '[' expression ']'  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP ';' '*' ')' ',' '[' ']' '=' '<' '>' '+' '-' '/' '.' }  -1
  Reduce item(s): 0 


State 144:
0: [P19 4] declarator -> declarator '[' constant_expression ']'  .   { ';' ')' ',' '[' }  -1
  Reduce item(s): 0 


State 145:
0: [P57 4] postfix_expression -> IDENTIFIER '(' expression_list ')'  .   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ';' '*' ')' ',' ']' '<' '>' '+' '-' '/' }  -1
  Reduce item(s): 0 


State 146:
0: [P72 2] expression_list -> expression_list ','  . expression   { ')' ',' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' ',' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' ',' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' ',' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' ',' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' ',' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' ',' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' ',' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' ',' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 150 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 147:
0: [P75 5] selection_statement -> IF '(' expression ')' statement  . ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
  0:   On ELSE to state 151 with (0 )


State 148:
0: [P76 5] iteration_statement -> WHILE '(' expression ')' statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 149:
0: [P77 5] iteration_statement -> FOR '(' expression ';' expression  . ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ';' }  1
  0:   On ';' to state 152 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 150:
0: [P72 3] expression_list -> expression_list ',' expression  .   { ')' ',' }  -1
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' ',' }  0
  0:   On OR_OP to state 91 with (1 )
  Reduce item(s): 0 


State 151:
0: [P75 6] selection_statement -> IF '(' expression ')' statement ELSE  . statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P29 0] statement ->  . selection_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P30 0] statement ->  . iteration_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P31 0] statement ->  . assignment_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P33 0] assignment_statement ->  . ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  11
12: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  10
13: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  12
14: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  10
15: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  10
  0:   On statement to state 153 with (0 )
  1:   On '{' to state 28 with (1 )
  2:   On selection_statement to state 29 with (2 )
  3:   On iteration_statement to state 30 with (3 )
  4:   On assignment_statement to state 31 with (4 )
  5:   On RETURN to state 32 with (5 )
  6:   On IF to state 33 with (6 )
  7:   On WHILE to state 34 with (7 )
  8:   On FOR to state 35 with (8 )
  9:   On ';' to state 36 with (9 )
  10:   On l_expression to state 37 with (10 12 14 15 )
  11:   On IDENTIFIER to state 38 with (11 )
  12:   On '*' to state 39 with (13 )


State 152:
0: [P77 6] iteration_statement -> FOR '(' expression ';' expression ';'  . expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P35 0] expression ->  . logical_and_expression   { OR_OP ')' }  1
2: [P36 0] expression ->  . expression OR_OP logical_and_expression   { OR_OP ')' }  0
3: [P37 0] logical_and_expression ->  . equality_expression   { OR_OP AND_OP ')' }  2
4: [P38 0] logical_and_expression ->  . logical_and_expression AND_OP equality_expression   { OR_OP AND_OP ')' }  1
5: [P39 0] equality_expression ->  . relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  3
6: [P40 0] equality_expression ->  . equality_expression EQ_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
7: [P41 0] equality_expression ->  . equality_expression NE_OP relational_expression   { EQ_OP NE_OP OR_OP AND_OP ')' }  2
8: [P42 0] relational_expression ->  . additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  4
9: [P43 0] relational_expression ->  . relational_expression '<' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
10: [P44 0] relational_expression ->  . relational_expression '>' additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
11: [P45 0] relational_expression ->  . relational_expression LE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
12: [P46 0] relational_expression ->  . relational_expression GE_OP additive_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' }  3
13: [P47 0] additive_expression ->  . multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  5
14: [P48 0] additive_expression ->  . additive_expression '+' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
15: [P49 0] additive_expression ->  . additive_expression '-' multiplicative_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP ')' '<' '>' '+' '-' }  4
16: [P50 0] multiplicative_expression ->  . unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  6
17: [P51 0] multiplicative_expression ->  . multiplicative_expression '*' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
18: [P52 0] multiplicative_expression ->  . multiplicative_expression '/' unary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  5
19: [P53 0] unary_expression ->  . postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  7
20: [P54 0] unary_expression ->  . unary_operator postfix_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  8
21: [P55 0] postfix_expression ->  . primary_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  9
22: [P56 0] postfix_expression ->  . IDENTIFIER '(' ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
23: [P57 0] postfix_expression ->  . IDENTIFIER '(' expression_list ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  10
24: [P58 0] postfix_expression ->  . l_expression INC_OP   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
25: [P73 0] unary_operator ->  . '-'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  12
26: [P74 0] unary_operator ->  . '!'   { INT_CONSTANT FLOAT_CONSTANT IDENTIFIER STRING_LITERAL '*' '(' '&' }  13
27: [P59 0] primary_expression ->  . l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
28: [P60 0] primary_expression ->  . '&' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  14
29: [P61 0] primary_expression ->  . l_expression '=' expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  11
30: [P62 0] primary_expression ->  . INT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  15
31: [P63 0] primary_expression ->  . FLOAT_CONSTANT   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  16
32: [P64 0] primary_expression ->  . STRING_LITERAL   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  17
33: [P65 0] primary_expression ->  . '(' expression ')'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP '*' ')' '<' '>' '+' '-' '/' }  18
34: [P66 0] l_expression ->  . IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  10
35: [P67 0] l_expression ->  . l_expression '[' expression ']'   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
36: [P68 0] l_expression ->  . '*' l_expression   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  19
37: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
38: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { GE_OP LE_OP EQ_OP NE_OP OR_OP AND_OP INC_OP PTR_OP '*' ')' '[' '=' '<' '>' '+' '-' '/' '.' }  11
  0:   On expression to state 154 with (0 2 )
  1:   On logical_and_expression to state 55 with (1 4 )
  2:   On equality_expression to state 56 with (3 6 7 )
  3:   On relational_expression to state 57 with (5 9 10 11 12 )
  4:   On additive_expression to state 58 with (8 14 15 )
  5:   On multiplicative_expression to state 59 with (13 17 18 )
  6:   On unary_expression to state 60 with (16 )
  7:   On postfix_expression to state 61 with (19 )
  8:   On unary_operator to state 62 with (20 )
  9:   On primary_expression to state 63 with (21 )
  10:   On IDENTIFIER to state 64 with (22 23 34 )
  11:   On l_expression to state 65 with (24 27 29 35 37 38 )
  12:   On '-' to state 66 with (25 )
  13:   On '!' to state 67 with (26 )
  14:   On '&' to state 68 with (28 )
  15:   On INT_CONSTANT to state 69 with (30 )
  16:   On FLOAT_CONSTANT to state 70 with (31 )
  17:   On STRING_LITERAL to state 71 with (32 )
  18:   On '(' to state 72 with (33 )
  19:   On '*' to state 39 with (36 )


State 153:
0: [P75 7] selection_statement -> IF '(' expression ')' statement ELSE statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 


State 154:
0: [P77 7] iteration_statement -> FOR '(' expression ';' expression ';' expression  . ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P36 1] expression -> expression  . OR_OP logical_and_expression   { OR_OP ')' }  1
  0:   On ')' to state 155 with (0 )
  1:   On OR_OP to state 91 with (1 )


State 155:
0: [P77 8] iteration_statement -> FOR '(' expression ';' expression ';' expression ')'  . statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  0
1: [P28 0] statement ->  . '{' statement_list '}'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  1
2: [P29 0] statement ->  . selection_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  2
3: [P30 0] statement ->  . iteration_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  3
4: [P31 0] statement ->  . assignment_statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  4
5: [P32 0] statement ->  . RETURN expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  5
6: [P75 0] selection_statement ->  . IF '(' expression ')' statement ELSE statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  6
7: [P76 0] iteration_statement ->  . WHILE '(' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  7
8: [P77 0] iteration_statement ->  . FOR '(' expression ';' expression ';' expression ')' statement   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  8
9: [P33 0] assignment_statement ->  . ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  9
10: [P34 0] assignment_statement ->  . l_expression '=' expression ';'   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  10
11: [P66 0] l_expression ->  . IDENTIFIER   { PTR_OP '[' '=' '.' }  11
12: [P67 0] l_expression ->  . l_expression '[' expression ']'   { PTR_OP '[' '=' '.' }  10
13: [P68 0] l_expression ->  . '*' l_expression   { PTR_OP '[' '=' '.' }  12
14: [P69 0] l_expression ->  . l_expression '.' IDENTIFIER   { PTR_OP '[' '=' '.' }  10
15: [P70 0] l_expression ->  . l_expression PTR_OP IDENTIFIER   { PTR_OP '[' '=' '.' }  10
  0:   On statement to state 156 with (0 )
  1:   On '{' to state 28 with (1 )
  2:   On selection_statement to state 29 with (2 )
  3:   On iteration_statement to state 30 with (3 )
  4:   On assignment_statement to state 31 with (4 )
  5:   On RETURN to state 32 with (5 )
  6:   On IF to state 33 with (6 )
  7:   On WHILE to state 34 with (7 )
  8:   On FOR to state 35 with (8 )
  9:   On ';' to state 36 with (9 )
  10:   On l_expression to state 37 with (10 12 14 15 )
  11:   On IDENTIFIER to state 38 with (11 )
  12:   On '*' to state 39 with (13 )


State 156:
0: [P77 9] iteration_statement -> FOR '(' expression ';' expression ';' expression ')' statement  .   { RETURN IF ELSE WHILE FOR IDENTIFIER '{' '}' ';' '*' }  -1
  Reduce item(s): 0 



